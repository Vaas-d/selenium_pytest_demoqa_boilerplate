{"uid":"6437b12fe63ebd29","name":"test_text_boxes","fullName":"tests.test_text_boxes.TestTextBoxes#test_text_boxes","historyId":"94718f81216f25bddd01afaf34cbdd3f","time":{"start":1687070033019,"stop":1687070034906,"duration":1887},"description":"Test to verify the input fields and output form on the page\n\n        :param test_setup: setting up the browser and page objects\n        :return: None\n        ","descriptionHtml":"<p>Test to verify the input fields and output form on the page</p>\n<pre><code>    :param test_setup: setting up the browser and page objects\n    :return: None\n</code></pre>\n","status":"broken","statusMessage":"AttributeError: 'ElementClickInterceptedException' object has no attribute 'message'","statusTrace":"self = <utils.UIObject.UIObject object at 0x7f50efeb9cf0>, wait = 60\ndouble_click = False, right_click = False\n\n    def click(self, wait=60, double_click=False, right_click=False):\n        self.wait_to_be_clickable(wait)\n        initial_handles = Browser.get_driver().window_handles\n    \n        try:\n            if double_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.double_click(self.get_element()).perform()\n            elif right_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.context_click(self.get_element()).perform()\n            else:\n>               self.get_element().click()\n\nutils/UIObject.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"50af307799388960713ae5864256005a\", element=\"D643BCA8A77967EDF2A51E17DD67B3DC_element_36\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"50af307799388960713ae5864256005a\", element=\"D643BCA8A77967EDF2A51E17DD67B3DC_element_36\")>\ncommand = 'clickElement'\nparams = {'id': 'D643BCA8A77967EDF2A51E17DD67B3DC_element_36'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"50af307799388960713ae5864256005a\")>\ndriver_command = 'clickElement'\nparams = {'id': 'D643BCA8A77967EDF2A51E17DD67B3DC_element_36'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f50efeba2c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x558cc8120847 \\\\u003Cunknown>\\\\n#21 0x558cc8130243 \\\\u003Cunknown>\\\\n#22 0x7f5742170b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"submit\" type=\"button\" class=\"btn btn-primary\">...</button> is not clickable at point (560, 389). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=114.0.5735.106)\nE       Stacktrace:\nE       #0 0x558cc81374e3 <unknown>\nE       #1 0x558cc7e66c76 <unknown>\nE       #2 0x558cc7ea89d4 <unknown>\nE       #3 0x558cc7ea6cbd <unknown>\nE       #4 0x558cc7ea4d2e <unknown>\nE       #5 0x558cc7ea410f <unknown>\nE       #6 0x558cc7e991da <unknown>\nE       #7 0x558cc7ec2012 <unknown>\nE       #8 0x558cc7e98b03 <unknown>\nE       #9 0x558cc7ec21de <unknown>\nE       #10 0x558cc7eda30e <unknown>\nE       #11 0x558cc7ec1de3 <unknown>\nE       #12 0x558cc7e972dd <unknown>\nE       #13 0x558cc7e9834e <unknown>\nE       #14 0x558cc80f73e4 <unknown>\nE       #15 0x558cc80fb3d7 <unknown>\nE       #16 0x558cc8105b20 <unknown>\nE       #17 0x558cc80fc023 <unknown>\nE       #18 0x558cc80ca1aa <unknown>\nE       #19 0x558cc81206b8 <unknown>\nE       #20 0x558cc8120847 <unknown>\nE       #21 0x558cc8130243 <unknown>\nE       #22 0x7f5742170b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_text_boxes.TestTextBoxes object at 0x7f50f51a6590>\ntest_setup = None\n\n    @pytest.mark.regression\n    def test_text_boxes(self, test_setup):\n        \"\"\"Test to verify the input fields and output form on the page\n    \n        :param test_setup: setting up the browser and page objects\n        :return: None\n        \"\"\"\n    \n        self.text_box.set_username(TestData.username)\n        self.text_box.set_email(TestData.email)\n        self.text_box.set_current_address(TestData.current_address)\n        self.text_box.set_permanent_address(TestData.permanent_address)\n        take_screenshot(self.driver, \"submitted_form\")\n    \n>       self.text_box.submit_form()\n\ntests/test_text_boxes.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/text_box_page.py:39: in submit_form\n    self.__submit_btn.click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.UIObject.UIObject object at 0x7f50efeb9cf0>, wait = 60\ndouble_click = False, right_click = False\n\n    def click(self, wait=60, double_click=False, right_click=False):\n        self.wait_to_be_clickable(wait)\n        initial_handles = Browser.get_driver().window_handles\n    \n        try:\n            if double_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.double_click(self.get_element()).perform()\n            elif right_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.context_click(self.get_element()).perform()\n            else:\n                self.get_element().click()\n        except Exception as error:\n>           if \"Other element would receive the click\" in error.message:\nE           AttributeError: 'ElementClickInterceptedException' object has no attribute 'message'\n\nutils/UIObject.py:107: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"new_session","time":{"start":1687070029711,"stop":1687070032568,"duration":2857},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"test_setup","time":{"start":1687070032568,"stop":1687070033018,"duration":450},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"testStage":{"description":"Test to verify the input fields and output form on the page\n\n        :param test_setup: setting up the browser and page objects\n        :return: None\n        ","status":"broken","statusMessage":"AttributeError: 'ElementClickInterceptedException' object has no attribute 'message'","statusTrace":"self = <utils.UIObject.UIObject object at 0x7f50efeb9cf0>, wait = 60\ndouble_click = False, right_click = False\n\n    def click(self, wait=60, double_click=False, right_click=False):\n        self.wait_to_be_clickable(wait)\n        initial_handles = Browser.get_driver().window_handles\n    \n        try:\n            if double_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.double_click(self.get_element()).perform()\n            elif right_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.context_click(self.get_element()).perform()\n            else:\n>               self.get_element().click()\n\nutils/UIObject.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"50af307799388960713ae5864256005a\", element=\"D643BCA8A77967EDF2A51E17DD67B3DC_element_36\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"50af307799388960713ae5864256005a\", element=\"D643BCA8A77967EDF2A51E17DD67B3DC_element_36\")>\ncommand = 'clickElement'\nparams = {'id': 'D643BCA8A77967EDF2A51E17DD67B3DC_element_36'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"50af307799388960713ae5864256005a\")>\ndriver_command = 'clickElement'\nparams = {'id': 'D643BCA8A77967EDF2A51E17DD67B3DC_element_36'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f50efeba2c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x558cc8120847 \\\\u003Cunknown>\\\\n#21 0x558cc8130243 \\\\u003Cunknown>\\\\n#22 0x7f5742170b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"submit\" type=\"button\" class=\"btn btn-primary\">...</button> is not clickable at point (560, 389). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=114.0.5735.106)\nE       Stacktrace:\nE       #0 0x558cc81374e3 <unknown>\nE       #1 0x558cc7e66c76 <unknown>\nE       #2 0x558cc7ea89d4 <unknown>\nE       #3 0x558cc7ea6cbd <unknown>\nE       #4 0x558cc7ea4d2e <unknown>\nE       #5 0x558cc7ea410f <unknown>\nE       #6 0x558cc7e991da <unknown>\nE       #7 0x558cc7ec2012 <unknown>\nE       #8 0x558cc7e98b03 <unknown>\nE       #9 0x558cc7ec21de <unknown>\nE       #10 0x558cc7eda30e <unknown>\nE       #11 0x558cc7ec1de3 <unknown>\nE       #12 0x558cc7e972dd <unknown>\nE       #13 0x558cc7e9834e <unknown>\nE       #14 0x558cc80f73e4 <unknown>\nE       #15 0x558cc80fb3d7 <unknown>\nE       #16 0x558cc8105b20 <unknown>\nE       #17 0x558cc80fc023 <unknown>\nE       #18 0x558cc80ca1aa <unknown>\nE       #19 0x558cc81206b8 <unknown>\nE       #20 0x558cc8120847 <unknown>\nE       #21 0x558cc8130243 <unknown>\nE       #22 0x7f5742170b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_text_boxes.TestTextBoxes object at 0x7f50f51a6590>\ntest_setup = None\n\n    @pytest.mark.regression\n    def test_text_boxes(self, test_setup):\n        \"\"\"Test to verify the input fields and output form on the page\n    \n        :param test_setup: setting up the browser and page objects\n        :return: None\n        \"\"\"\n    \n        self.text_box.set_username(TestData.username)\n        self.text_box.set_email(TestData.email)\n        self.text_box.set_current_address(TestData.current_address)\n        self.text_box.set_permanent_address(TestData.permanent_address)\n        take_screenshot(self.driver, \"submitted_form\")\n    \n>       self.text_box.submit_form()\n\ntests/test_text_boxes.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/text_box_page.py:39: in submit_form\n    self.__submit_btn.click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.UIObject.UIObject object at 0x7f50efeb9cf0>, wait = 60\ndouble_click = False, right_click = False\n\n    def click(self, wait=60, double_click=False, right_click=False):\n        self.wait_to_be_clickable(wait)\n        initial_handles = Browser.get_driver().window_handles\n    \n        try:\n            if double_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.double_click(self.get_element()).perform()\n            elif right_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.context_click(self.get_element()).perform()\n            else:\n                self.get_element().click()\n        except Exception as error:\n>           if \"Other element would receive the click\" in error.message:\nE           AttributeError: 'ElementClickInterceptedException' object has no attribute 'message'\n\nutils/UIObject.py:107: AttributeError","steps":[],"attachments":[{"uid":"1e40f142f1e6ee45","name":"submitted_form","source":"1e40f142f1e6ee45.png","type":"image/png","size":123087}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0},"afterStages":[{"name":"new_session::0","time":{"start":1687070034944,"stop":1687070035085,"duration":141},"status":"passed","steps":[],"attachments":[{"uid":"d139f748abf639f4","name":"teardown_screenshot","source":"d139f748abf639f4.png","type":"image/png","size":112000}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0}],"labels":[{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_text_boxes"},{"name":"subSuite","value":"TestTextBoxes"},{"name":"host","value":"fv-az298-776"},{"name":"thread","value":"2645-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_text_boxes"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["regression"]},"source":"6437b12fe63ebd29.json","parameterValues":[]}