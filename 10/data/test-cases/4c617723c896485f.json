{"uid":"4c617723c896485f","name":"test_forbidden_link","fullName":"tests.test_links.TestLinks#test_forbidden_link","historyId":"0bd61a3dc27cd9bc4c663740ac17bde3","time":{"start":1687070015920,"stop":1687070017266,"duration":1346},"description":"Test to validate forbidden link on the page and verify response\n\n        :param test_setup: setting up the browser and page objects\n        :return: None\n        ","descriptionHtml":"<p>Test to validate forbidden link on the page and verify response</p>\n<pre><code>    :param test_setup: setting up the browser and page objects\n    :return: None\n</code></pre>\n","status":"broken","statusMessage":"AttributeError: 'ElementClickInterceptedException' object has no attribute 'message'","statusTrace":"self = <utils.UIObject.UIObject object at 0x7f50efe513f0>, wait = 60\ndouble_click = False, right_click = False\n\n    def click(self, wait=60, double_click=False, right_click=False):\n        self.wait_to_be_clickable(wait)\n        initial_handles = Browser.get_driver().window_handles\n    \n        try:\n            if double_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.double_click(self.get_element()).perform()\n            elif right_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.context_click(self.get_element()).perform()\n            else:\n>               self.get_element().click()\n\nutils/UIObject.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"7e6687c9c9339bec9ac6846a94661740\", element=\"610E0B0BBCCB2233E17E3FC9EE50118B_element_18\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"7e6687c9c9339bec9ac6846a94661740\", element=\"610E0B0BBCCB2233E17E3FC9EE50118B_element_18\")>\ncommand = 'clickElement'\nparams = {'id': '610E0B0BBCCB2233E17E3FC9EE50118B_element_18'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7e6687c9c9339bec9ac6846a94661740\")>\ndriver_command = 'clickElement'\nparams = {'id': '610E0B0BBCCB2233E17E3FC9EE50118B_element_18'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f50efe53f10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x559d4654f847 \\\\u003Cunknown>\\\\n#21 0x559d4655f243 \\\\u003Cunknown>\\\\n#22 0x7f24c9809b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a id=\"forbidden\" href=\"javascript:void(0)\">...</a> is not clickable at point (246, 484). Other element would receive the click: <iframe frameborder=\"0\" src=\"https://fb494446afb882330d7e675a202ada63.safeframe.googlesyndication.com/safeframe/1-0-40/html/container.html\" id=\"google_ads_iframe_/21849154601,22343295815/Ad.Plus-Anchor_0\" title=\"3rd party ad content\" name=\"\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"728\" height=\"90\" data-is-safeframe=\"true\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" role=\"region\" aria-label=\"Advertisement\" tabindex=\"0\" data-google-container-id=\"1\" style=\"border: 0px; vertical-align: bottom;\" data-load-complete=\"true\"></iframe>\nE         (Session info: chrome=114.0.5735.106)\nE       Stacktrace:\nE       #0 0x559d465664e3 <unknown>\nE       #1 0x559d46295c76 <unknown>\nE       #2 0x559d462d79d4 <unknown>\nE       #3 0x559d462d5cbd <unknown>\nE       #4 0x559d462d3d2e <unknown>\nE       #5 0x559d462d310f <unknown>\nE       #6 0x559d462c81da <unknown>\nE       #7 0x559d462f1012 <unknown>\nE       #8 0x559d462c7b03 <unknown>\nE       #9 0x559d462f11de <unknown>\nE       #10 0x559d4630930e <unknown>\nE       #11 0x559d462f0de3 <unknown>\nE       #12 0x559d462c62dd <unknown>\nE       #13 0x559d462c734e <unknown>\nE       #14 0x559d465263e4 <unknown>\nE       #15 0x559d4652a3d7 <unknown>\nE       #16 0x559d46534b20 <unknown>\nE       #17 0x559d4652b023 <unknown>\nE       #18 0x559d464f91aa <unknown>\nE       #19 0x559d4654f6b8 <unknown>\nE       #20 0x559d4654f847 <unknown>\nE       #21 0x559d4655f243 <unknown>\nE       #22 0x7f24c9809b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_links.TestLinks object at 0x7f50f51a72b0>, test_setup = None\n\n    @pytest.mark.smoke\n    def test_forbidden_link(self, test_setup):\n        \"\"\"Test to validate forbidden link on the page and verify response\n    \n        :param test_setup: setting up the browser and page objects\n        :return: None\n        \"\"\"\n    \n>       self.links.click_forbidden_link()\n\ntests/test_links.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/links_page.py:50: in click_forbidden_link\n    self.__forbidden_link.click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.UIObject.UIObject object at 0x7f50efe513f0>, wait = 60\ndouble_click = False, right_click = False\n\n    def click(self, wait=60, double_click=False, right_click=False):\n        self.wait_to_be_clickable(wait)\n        initial_handles = Browser.get_driver().window_handles\n    \n        try:\n            if double_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.double_click(self.get_element()).perform()\n            elif right_click:\n                actions = ActionChains(Browser.get_driver())\n                actions.context_click(self.get_element()).perform()\n            else:\n                self.get_element().click()\n        except Exception as error:\n>           if \"Other element would receive the click\" in error.message:\nE           AttributeError: 'ElementClickInterceptedException' object has no attribute 'message'\n\nutils/UIObject.py:107: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"new_session","time":{"start":1687070010930,"stop":1687070015486,"duration":4556},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"test_setup","time":{"start":1687070015486,"stop":1687070015920,"duration":434},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"afterStages":[{"name":"new_session::0","time":{"start":1687070017317,"stop":1687070018471,"duration":1154},"status":"passed","steps":[],"attachments":[{"uid":"ccc61cbfdd5c53e4","name":"teardown_screenshot","source":"ccc61cbfdd5c53e4.png","type":"image/png","size":204901}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0}],"labels":[{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_links"},{"name":"subSuite","value":"TestLinks"},{"name":"host","value":"fv-az298-776"},{"name":"thread","value":"2645-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_links"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["smoke"]},"source":"4c617723c896485f.json","parameterValues":[]}